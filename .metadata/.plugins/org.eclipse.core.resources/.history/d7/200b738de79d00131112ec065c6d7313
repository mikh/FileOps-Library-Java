package file_operations;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import static java.nio.file.StandardCopyOption.*;

import string_operations.StrOps;

public class FileOps {
	public static String createFolder(String location, String name){
		
		try{
			File f = new File(location + "\\" + name);
			f.mkdir();
			/*if(!f.mkdir()){
				System.out.println("Failed to create directory " + location + "\\" + name);
				System.exit(-1);
			}*/
		} catch(Exception e){
			System.out.println("Failed to create directory " + location + "\\" + name);
			System.exit(-1);
		}
		
		return location + "\\" + name;
	}
	
	public static void writeToFile(String filepath, String str, boolean append){
		try{
			BufferedWriter bw = new BufferedWriter(new FileWriter(filepath, append));
			bw.write(str);
			bw.close();
		} catch(IOException e){
			System.out.println("Failed to write to file " + filepath);
			System.exit(-1);
		}
	}
	
	public static void moveFile(String start_location, String final_location){
		try{
			Files.move(Paths.get(start_location), Paths.get(final_location), REPLACE_EXISTING);
		} catch(IOException e){
			System.out.println("Error moving " + start_location + " to " + final_location);
		}
	}
	
	public static void renameFile(String location, String new_name, boolean keep_extension){
		try{
			String old_name = StrOps.getDilineatedSubstring(location, "\\", 0, true);
			int index = location.length() - new_name.length();
			String path = location.substring(0,index);
			String final_path = path;
			if(!keep_extension)
				final_path += new_name;
			else{
				
			}
		} catch(IOException e){
			System.out.println("Error renaming " + location + " to " + new_name);
		}
	}
	
	public static boolean fileExists(String file){
		File f = new File(file);
		if(f.exists() && !f.isDirectory())
			return true;
		return false;
	}
}
